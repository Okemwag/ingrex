version: '3.8'

services:
  # NestJS Application
  api:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        - NODE_ENV=${NODE_ENV:-production}
    container_name: event-system-api
    restart: unless-stopped
    ports:
      - "${API_PORT:-3000}:3000"
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - DATABASE_URL=postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@postgres:5432/${POSTGRES_DB:-event_management}
      - REDIS_URL=redis://redis:6379
      - ELASTICSEARCH_URL=http://elasticsearch:9200
      - WAIT_FOR_SERVICES=true
      - RUN_MIGRATIONS=${RUN_MIGRATIONS:-true}
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - ELASTICSEARCH_HOST=elasticsearch
      - ELASTICSEARCH_PORT=9200
      - JWT_SECRET=${JWT_SECRET:-your_jwt_secret}
      - JWT_EXPIRATION=${JWT_EXPIRATION:-86400}
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY:-sk_test_your_stripe_secret_key}
      - MAIL_HOST=${MAIL_HOST:-smtp.example.com}
      - MAIL_PORT=${MAIL_PORT:-587}
      - MAIL_USER=${MAIL_USER:-user}
      - MAIL_PASSWORD=${MAIL_PASSWORD:-password}
      - MAIL_FROM=${MAIL_FROM:-noreply@example.com}
      - CLUSTERING_ENABLED=${CLUSTERING_ENABLED:-false}
    volumes:
      - ./uploads:/usr/src/app/uploads
      - ./logs:/usr/src/app/logs
    depends_on:
      - postgres
      - redis
      - elasticsearch
    networks:
      - event-system-network

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: event-system-postgres
    restart: unless-stopped
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - POSTGRES_DB=${POSTGRES_DB:-event_management}
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - event-system-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: event-system-redis
    restart: unless-stopped
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis-data:/data
    networks:
      - event-system-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Elasticsearch for search functionality
  elasticsearch:
    image: elasticsearch:8.9.0
    container_name: event-system-elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
    ports:
      - "${ELASTICSEARCH_PORT:-9200}:9200"
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    networks:
      - event-system-network
    healthcheck:
      test: ["CMD-SHELL", "curl -s http://localhost:9200/_cluster/health | grep -q '\"status\":\"green\"\\|\"status\":\"yellow\"'"]
      interval: 20s
      timeout: 10s
      retries: 5

volumes:
  postgres-data:
  redis-data:
  elasticsearch-data:

networks:
  event-system-network:
    driver: bridge